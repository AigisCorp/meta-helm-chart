{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Learn about the motivation behind Meta Helm Chart and how it works.</p>"},{"location":"#features","title":"Features","text":"<p>See what Meta Helm Chart can do for you.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Get started with Meta Helm Chart in just a few steps.</p>"},{"location":"#usage","title":"Usage","text":"<p>Learn how to use Meta Helm Chart to deploy your applications.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Learn how to contribute to Meta Helm Chart.</p>"},{"location":"#license","title":"License","text":"<p>See the license for Meta Helm Chart.</p>"},{"location":"sections/features/","title":"Features","text":"<p>1- Simplified Configuration:</p> <ul> <li>You can configure your application using a file called values.yaml.</li> <li>You don't need to deal with complex Helm templates to define how your application should run on Kubernetes.</li> </ul> <p>2- Customizable:</p> <ul> <li>You can easily adjust various settings of your application in the values.yaml file.</li> <li>This includes things like changing the version of the application's container image, specifying how many resources (CPU, memory) the application should use, setting environment variables, and more.</li> <li>All of these customizations can be done directly in the values.yaml file, making it straightforward to tailor your application's behavior.</li> </ul> <p>3- Compatibility:</p> <ul> <li>This configuration approach is compatible with Helm 3, which is the latest version of Helm.</li> <li>It can be used with any Kubernetes cluster, meaning you're not limited to a specific environment or provider.</li> </ul> <p>4- Extensible:</p> <ul> <li>While you can use the simplified values.yaml approach, you're not limited to it.</li> <li>If you need more advanced configuration or want to use Helm's template capabilities for fine-grained control, you can include custom templates alongside the values.yaml file.</li> <li>This means you have the flexibility to combine the ease of values.yaml with the power of Helm templates when necessary.</li> </ul>"},{"location":"sections/getting-started/","title":"Getting started","text":"<p>Installation: This step is about ensuring that Helm 3 is installed on your system. Helm is a tool for managing Kubernetes applications, and Helm 3 is the version in use. If you don't have Helm 3 installed, you can follow the Helm installation guide to set it up. This guide will provide you with instructions for installing Helm on your system.</p> <p>Create your own values.yaml: In this step, you are instructed to create a custom values.yaml file. This file is used to configure various aspects of your application deployment on Kubernetes. You can start with a sample values.yaml file provided at the link (example/values.yaml) and customize it to match your specific application's requirements. This customization is where you define things like the version of your application, resource allocation (CPU, memory), and environment variables.</p> <p>Template with your custom values.yaml: This step involves using Helm to generate Kubernetes manifests based on your custom values.yaml file. It provides the following commands:</p> <pre><code>helm repo add meta-helm-chart https://aigiscorp.github.io/meta-helm-chart/\n</code></pre> <p>This adds a Helm repository called meta-helm-chart from a specific URL. Helm repositories are collections of charts (packages of pre-configured Kubernetes resources) that can be installed and managed.</p> <pre><code>helm repo update\n</code></pre> <p>This command updates the local list of Helm repositories to ensure you have the latest information.</p> <pre><code>helm template your-chart-name meta-helm-chart/meta-helm-chart --values yourownvalues.yaml\n</code></pre> <p>This command uses the Helm chart from the meta-helm-chart repository and your custom values.yaml file to generate Kubernetes manifests without actually installing anything. This is useful for previewing the configuration before applying it to your cluster.</p> <p>Install/Upgrade with your custom values.yaml: These commands allow you to install or upgrade your application on your Kubernetes cluster using your custom values.yaml file:</p> <pre><code>helm install your-chart-name meta-helm-chart/meta-helm-chart --values yourownvalues.yaml\n</code></pre> <p>This command installs the Helm chart with the specified name (your-chart-name) using your custom values.yaml.</p> <pre><code>helm upgrade your-chart-name meta-helm-chart/meta-helm-chart --values yourownvalues.yaml\n</code></pre> <p>This command upgrades the Helm chart with the specified name, again using your custom values.yaml. This is useful when you need to make changes to your application's configuration.</p> <p>Package with your custom values.yaml: This step is about packaging your custom configuration into a Helm chart that can be easily shared or distributed. It involves the following commands:</p> <pre><code>helm pull meta-helm-chart/meta-helm-chart --untar\n</code></pre> <p>This command downloads the Helm chart from the meta-helm-chart repository and extracts its contents into a directory.</p> <pre><code>cp yourownvalues.yaml meta-helm-chart/values.yaml\n</code></pre> <p>This copies your custom values.yaml into the Helm chart directory as values.yaml.</p> <pre><code>mv meta-helm-chart your-chart-name\n</code></pre> <p>This renames the directory to match the name you want for your Helm chart.</p> <pre><code>helm package your-chart-name\n</code></pre> <p>This packages the directory as a Helm chart with the name you specified. The resulting .tgz file can be easily shared or installed on other Kubernetes clusters.nstallation: This step is about ensuring that Helm 3 is installed on your system. Helm is a tool for managing Kubernetes applications, and Helm 3 is the version in use. If you don't have Helm 3 installed, you can follow the Helm installation guide to set it up. This guide will provide you with instructions for installing Helm on your system.</p>"},{"location":"sections/introduction/","title":"Introduction to Meta Helm Chart:","text":"<p>A Meta Helm Chart is a powerful tool in the world of Kubernetes orchestration. It provides a structured, standardized foundation for building Helm charts, which are packages of pre-configured Kubernetes resources. The primary purpose of a Meta Helm Chart is to simplify and streamline the process of chart creation and management.</p> <p>Key features and advantages of a Meta Helm Chart include:</p> <ul> <li> <p>Standardized Structure: Meta Helm Charts define a consistent structure and set of best practices for organizing Helm chart templates. This standardization simplifies the creation of new charts and enhances the maintainability of existing ones.</p> </li> <li> <p>Reusability: By serving as a template for chart templates, Meta Helm Charts promote reusability. Chart authors can use Meta Helm Charts as a starting point, saving time and effort when developing new charts. This is particularly valuable in larger organizations with multiple applications.</p> </li> <li> <p>Customization: Users can customize Meta Helm Charts to suit their specific application's requirements by providing a custom values.yaml file. This customization feature ensures that applications can be tailored to individual needs while maintaining a common structure.</p> </li> <li> <p>Version Control: Like other Helm charts, Meta Helm Charts can be version-controlled and distributed via Helm repositories. This allows for version management and easy sharing of chart templates across teams and organizations.</p> </li> <li> <p>Community and Ecosystem: The use of Meta Helm Charts can foster a community and ecosystem of shared practices and standards in Helm chart development. As more users adopt this approach, it can lead to the exchange of best practices and collaboration.</p> </li> </ul>"},{"location":"sections/usage/","title":"Usage","text":"<p>The primary usage of the Meta Helm Chart revolves around defining and managing your application's configuration through the values.yaml file. This configuration file acts as the central hub where you specify various settings and parameters that dictate how your application is deployed and run within a Kubernetes cluster. To facilitate this process, you can begin with a sample values.yaml file provided in the Meta Helm Chart repository. This sample file serves as a helpful starting point, giving you a basic structure that you can modify and tailor to meet the specific requirements of your application.</p> <p>For those who are well-versed in Helm and wish to harness its templating capabilities for fine-grained control over Kubernetes resources, Meta Helm Charts offer the flexibility to include custom templates within the Helm chart structure. These templates, when combined with the values.yaml file, allow you to create a powerful, yet highly customizable deployment configuration. You can reference these custom templates directly in your values.yaml, granting you the ability to strike a balance between the simplicity of values.yaml and the robustness of Helm templates. This is especially beneficial when you need to implement intricate configurations, dependencies, or conditionals in your application deployment.</p> <p>For a deeper dive into the usage of Meta Helm Charts, as well as comprehensive instructions, examples, and best practices, we recommend referring to the extensive documentation provided within the Meta Helm Chart repository. This documentation serves as a valuable resource that guides you through the various features and capabilities of Meta Helm Charts, ensuring that you can harness their full potential to manage your Kubernetes applications effectively. It's a wellspring of knowledge that can help you become proficient in crafting, customizing, and maintaining Helm charts, ultimately making your Kubernetes deployments more streamlined and efficient.</p>"}]}